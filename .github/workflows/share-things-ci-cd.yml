name: ShareThings CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    name: Lint
    runs-on: [self-hosted, Rocky Linux]
    
    steps:
    - name: Check Podman installation
      run: |
        if ! command -v podman &> /dev/null; then
          echo "Error: Podman is not installed on the runner."
          exit 1
        fi
        if ! command -v podman-compose &> /dev/null; then
          echo "Error: Podman Compose is not installed on the runner."
          exit 1
        fi
        echo "Podman version: $(podman --version)"
        echo "Podman Compose version: $(podman-compose --version)"
    
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install client dependencies with TypeScript ESLint plugin fix
      run: |
        cd client
        npm ci
        # Install compatible versions of TypeScript ESLint plugin
        npm install --save-dev @typescript-eslint/eslint-plugin@5.62.0 @typescript-eslint/parser@5.62.0
        echo "Installed TypeScript ESLint plugin version:"
        npm list @typescript-eslint/eslint-plugin
    
    - name: Install server dependencies
      run: cd server && npm ci
    
    - name: Lint server
      run: |
        echo "Running server lint with detailed output..."
        cd server && npm run lint -- --format stylish
    
    - name: Lint client
      run: |
        echo "Running client lint with detailed output..."
        cd client && npm run lint -- --format stylish

  build:
    name: Build and Test
    needs: [lint]
    runs-on: [self-hosted, Rocky Linux]
    
    steps:
    - name: Check Podman installation
      run: |
        if ! command -v podman &> /dev/null; then
          echo "Error: Podman is not installed on the runner."
          exit 1
        fi
        if ! command -v podman-compose &> /dev/null; then
          echo "Error: Podman Compose is not installed on the runner."
          exit 1
        fi
        echo "Podman version: $(podman --version)"
        echo "Podman Compose version: $(podman-compose --version)"
    
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install client dependencies
      run: cd client && npm ci
    
    - name: Install server dependencies
      run: cd server && npm ci
    
    - name: Build server
      run: cd server && npm run build
    
    - name: Build client
      run: cd client && npm run build
    
    - name: Test server
      run: cd server && npm test
    
    - name: Test client
      run: cd client && npm test
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          server/dist
          client/dist

  test-setup:
    name: Test Setup Script
    needs: [build]
    runs-on: [self-hosted, Rocky Linux]
    
    steps:
    - name: Check Podman installation
      run: |
        if ! command -v podman &> /dev/null; then
          echo "Error: Podman is not installed on the runner."
          exit 1
        fi
        if ! command -v podman-compose &> /dev/null; then
          echo "Error: Podman Compose is not installed on the runner."
          exit 1
        fi
        echo "Podman version: $(podman --version)"
        echo "Podman Compose version: $(podman-compose --version)"
    
    - uses: actions/checkout@v3
    
    - name: List test directory contents
      run: |
        echo "Listing test directory contents:"
        ls -la test/
        echo "Listing test/setup directory contents:"
        ls -la test/setup/
    
    - name: Make setup test scripts executable
      run: |
        if [ -f "test/setup/setup-test-install.sh" ]; then
          chmod +x test/setup/setup-test-install.sh
          echo "Made setup-test-install.sh executable"
        else
          echo "ERROR: setup-test-install.sh not found!"
          exit 1
        fi
    
    - name: Debug environment
      run: |
        echo "GitHub Actions environment:"
        echo "Working directory: $(pwd)"
        ls -la
        echo "Podman version:"
        podman --version
        echo "Podman Compose version:"
        podman-compose --version
        echo "Podman info:"
        podman info
        echo "Available disk space:"
        df -h
    
    - name: Prepare environment for containers
      run: |
        # Create necessary directories
        mkdir -p data
        mkdir -p client/dist
        mkdir -p client/dist/health
        
        # Create health check endpoint for frontend
        echo '{"status":"ok"}' > client/dist/health/index.json
        
        # Set appropriate permissions - make directories writable by container user (1001:1001)
        chmod -R 777 data
        chmod -R 777 client/dist
        
        # Create a volume for SQLite data persistence
        podman volume create data_volume || echo "Volume may already exist"
        
        # List volumes for verification
        echo "Podman volumes:"
        podman volume ls
        
        # List directories and permissions for verification
        echo "Directory permissions:"
        ls -la data
        ls -la client/dist
        ls -la client/dist/health

    - name: Run setup installation test script
      run: |
        # Add more debugging information
        echo "Node.js version: $(node --version || echo 'not installed')"
        echo "NPM version: $(npm --version || echo 'not installed')"
        echo "Podman version: $(podman --version)"
        echo "Podman Compose version: $(podman-compose --version)"
        echo "Available memory: $(free -m)"
        echo "Available disk space: $(df -h)"
        
        # Use a longer timeout for the full installation test
        timeout 600 ./test/setup/setup-test-install.sh
      timeout-minutes: 15  # Increased timeout for the entire job
      env:
        CI: true
        PODMAN_USERNS: keep-id
        
    - name: Debug container and file state
      if: always()
      run: |
        echo "Checking container status..."
        podman ps -a
        
        echo "Checking container logs..."
        for container in $(podman ps -a --format "{{.Names}}"); do
          echo "=== Logs for container $container ==="
          podman logs $container || echo "Failed to get logs for $container"
          echo ""
        done
        
        echo "Checking container inspect..."
        for container in $(podman ps -a --format "{{.Names}}"); do
          echo "=== Inspect for container $container ==="
          podman inspect $container || echo "Failed to inspect $container"
          echo ""
        done
        
        echo "Checking build/config directory contents..."
        ls -la build/config/
        
        echo "Checking for podman-compose.update.yml and its backup..."
        find . -name "podman-compose.update.yml*" || echo "No podman-compose.update.yml files found"
        
        echo "Checking file permissions..."
        ls -la build/config/podman-compose* || echo "No podman-compose files found"
        
        echo "Checking for log directories..."
        find logs -type d || echo "No logs directory found"

  integration:
    name: Dockered Build and Tests
    needs: [build]
    runs-on: [self-hosted, Rocky Linux]
    
    steps:
    - name: Check Podman installation
      run: |
        if ! command -v podman &> /dev/null; then
          echo "Error: Podman is not installed on the runner."
          exit 1
        fi
        if ! command -v podman-compose &> /dev/null; then
          echo "Error: Podman Compose is not installed on the runner."
          exit 1
        fi
        echo "Podman version: $(podman --version)"
        echo "Podman Compose version: $(podman-compose --version)"
    
    - uses: actions/checkout@v3
    
    - name: Make build-and-test script executable
      run: chmod +x build/scripts/build-and-test.sh
    
    - name: Debug environment
      run: |
        echo "GitHub Actions environment:"
        echo "Working directory: $(pwd)"
        ls -la
        echo "Podman version:"
        podman --version
        echo "Podman Compose version:"
        podman-compose --version
        echo "Podman info:"
        podman info
        echo "Available disk space:"
        df -h
    
    - name: Build and run tests with verbose output
      run: bash -x ./build/scripts/build-and-test.sh
      env:
        CI: true
        PODMAN_USERNS: keep-id
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  # The build-production job has been removed as we're relying on the test-setup job
  # to verify production readiness

  deploy-production:
    name: Deploy to Production
    needs: [test-setup, integration]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: [self-hosted, Rocky Linux]
    
    steps:
      - name: Check Podman installation
        run: |
          if ! command -v podman &> /dev/null; then
            echo "Error: Podman is not installed on the runner."
            exit 1
          fi
          if ! command -v podman-compose &> /dev/null; then
            echo "Error: Podman Compose is not installed on the runner."
            exit 1
          fi
          echo "Podman version: $(podman --version)"
          echo "Podman Compose version: $(podman-compose --version)"
      
      - name: Deploy to production server
        # Use sshpass to handle password authentication
        run: |
          # Install sshpass if not already installed
          if ! command -v sshpass &> /dev/null; then
            sudo yum install -y sshpass
          fi
          
          # Function to check if setup.sh --update is running
          check_update_script_running() {
            sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "pgrep -f 'setup.sh --update'" > /dev/null
            return $?
          }
          
          # Wait until any existing setup.sh --update process completes
          echo "Checking if setup.sh --update is already running on the production server..."
          while check_update_script_running; do
            echo "setup.sh --update is currently running. Waiting 30 seconds before checking again..."
            sleep 30
          done
          
          echo "No running setup.sh --update process detected. Proceeding with deployment..."
          
          # Set up SSH connection and run the update script with verbose output
          echo "Starting deployment with verbose logging..."
          
          # Create a log directory if it doesn't exist
          mkdir -p deployment-logs
          
          # Create the build/config directory on the production server
          echo "Creating build/config directory on production server..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "mkdir -p ~/share-things/build/config"
          
          # Create a simple compose file with host networking and restart: "no" for update process
          echo "Creating compose file with host networking and restart: no for update process..."
          echo 'version: "3"' > simple-compose.yml
          echo 'services:' >> simple-compose.yml
          echo '  frontend:' >> simple-compose.yml
          echo '    image: localhost/share-things_frontend:latest' >> simple-compose.yml
          echo '    network_mode: host' >> simple-compose.yml
          echo '    restart: "no"' >> simple-compose.yml
          echo '    environment:' >> simple-compose.yml
          echo '      - PORT=15000' >> simple-compose.yml
          echo '      - STATIC_DIR=/app/public' >> simple-compose.yml
          echo '  backend:' >> simple-compose.yml
          echo '    image: localhost/share-things_backend:latest' >> simple-compose.yml
          echo '    network_mode: host' >> simple-compose.yml
          echo '    environment:' >> simple-compose.yml
          echo '      - PORT=15001' >> simple-compose.yml
          echo '    restart: "no"' >> simple-compose.yml
          
          # Copy the compose file to the production server
          echo "Copying compose file to production server..."
          sshpass -p "${{ secrets.GHRUserPassword }}" scp -o StrictHostKeyChecking=no simple-compose.yml ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }}:~/share-things/build/config/podman-compose.yml
          
          # Run the setup script with update mode, non-interactive, and debug flags
          echo "Running setup.sh with update mode for production deployment..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -v -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && bash -x ./setup.sh --update --non-interactive --debug 2>&1" | tee deployment-logs/deploy-$(date +%Y%m%d-%H%M%S).log
          DEPLOY_EXIT_CODE=$?
          
          # After successful update, create final compose file with restart: always for normal operation
          if [ $DEPLOY_EXIT_CODE -eq 0 ]; then
            echo "Creating final compose file with restart: always for normal operation..."
            echo 'version: "3"' > final-compose.yml
            echo 'services:' >> final-compose.yml
            echo '  frontend:' >> final-compose.yml
            echo '    image: localhost/share-things_frontend:latest' >> final-compose.yml
            echo '    network_mode: host' >> final-compose.yml
            echo '    restart: always' >> final-compose.yml
            echo '    environment:' >> final-compose.yml
            echo '      - PORT=15000' >> final-compose.yml
            echo '      - STATIC_DIR=/app/public' >> final-compose.yml
            echo '  backend:' >> final-compose.yml
            echo '    image: localhost/share-things_backend:latest' >> final-compose.yml
            echo '    network_mode: host' >> final-compose.yml
            echo '    environment:' >> final-compose.yml
            echo '      - PORT=15001' >> final-compose.yml
            echo '    restart: always' >> final-compose.yml
            
            # Copy the final compose file to the production server
            echo "Copying final compose file to production server..."
            sshpass -p "${{ secrets.GHRUserPassword }}" scp -o StrictHostKeyChecking=no final-compose.yml ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }}:~/share-things/build/config/podman-compose.yml
            
            # Restart containers with the final compose file
            echo "Restarting containers with final compose file..."
            sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && podman-compose -f build/config/podman-compose.yml up -d"
          fi
          
          # Get container status after deployment
          echo "Checking container status after deployment..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && podman ps --filter label=io.podman.compose.project=share-things" | tee -a deployment-logs/deploy-$(date +%Y%m%d-%H%M%S)-containers.log
          
          # Check for any build images
          echo "Checking for build images..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && podman images | grep share-things" | tee -a deployment-logs/deploy-$(date +%Y%m%d-%H%M%S)-images.log
          
          # Check for compose files
          echo "Checking for compose files..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && ls -la build/config/" | tee -a deployment-logs/deploy-$(date +%Y%m%d-%H%M%S)-files.log
          
          # Get container logs
          echo "Fetching container logs..."
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && podman logs --tail 50 share-things-frontend" | tee -a deployment-logs/deploy-$(date +%Y%m%d-%H%M%S)-frontend.log
          sshpass -p "${{ secrets.GHRUserPassword }}" ssh -o StrictHostKeyChecking=no ${{ secrets.GHRUserName }}@${{ secrets.DeploymentServerIP }} "cd ~/share-things && podman logs --tail 50 share-things-backend" | tee -a deployment-logs/deploy-$(date +%Y%m%d-%H%M%S)-backend.log
          
          # Check if the deployment was successful
          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "Deployment failed with exit code $DEPLOY_EXIT_CODE"
            exit $DEPLOY_EXIT_CODE
          else
            echo "Deployment completed successfully"
            
            # Upload deployment logs as artifacts
            echo "Uploading deployment logs as artifacts..."
          fi
          
      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-logs
          path: deployment-logs/
