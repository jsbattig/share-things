# Standard test configuration for ShareThings with host networking
version: '3'
services:
  frontend:
    image: linner.ddns.net:4443/docker.io.proxy/node:18-alpine
    network_mode: "host"  # Use host networking instead of bridge
    volumes:
      - ./client/dist:/app/public:Z
      - ./client/static-server.js:/app/static-server.js:Z
    restart: always
    environment:
      - PORT=15000
      - STATIC_DIR=/app/public
    # Run the Node.js static file server directly from the mounted file
    command:
      - sh
      - -c
      - |
        # Check if port is already in use
        if nc -z 0.0.0.0 15000 2>/dev/null; then
          echo "ERROR: Port 15000 is already in use by another process"
          netstat -tulpn | grep 15000 || echo "Could not determine which process is using port 15000"
          exit 1
        fi
        
        # Create necessary directories and files
        mkdir -p /app/public/health &&
        echo '{"status":"ok"}' > /app/public/health/index.json &&
        
        # Create a package.json file to specify module type
        echo '{"type":"module"}' > /app/package.json &&
        
        # Install dependencies globally
        npm install -g express compression &&
        
        # Set NODE_OPTIONS to increase memory limit and add debug flags
        export NODE_OPTIONS="--max-old-space-size=512 --trace-warnings"
        
        # Run the static server with detailed error output and timeout
        timeout 240 node --trace-uncaught /app/static-server.js || {
          echo "Server failed to start or timed out";
          echo "Node.js version: $(node --version)";
          echo "Available memory: $(free -m)";
          exit 1;
        }
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:15000/health"]
      interval: 5s
      timeout: 3s
      retries: 3
  
  backend:
    image: linner.ddns.net:4443/docker.io.proxy/node:18-alpine
    network_mode: "host"  # Use host networking instead of bridge
    volumes:
      - data_volume:/app/data:Z
    environment:
      - PORT=15001
    command: ["node", "-e", "const http=require('http');const server=http.createServer((req,res)=>{if(req.url==='/health'){res.writeHead(200,{'Content-Type':'application/json'});res.end(JSON.stringify({status:'ok'}));}else{res.writeHead(404);res.end();}});server.listen(15001);console.log('Server listening on port 15001');"]
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:15001/health"]
      interval: 5s
      timeout: 3s
      retries: 3

# No networks needed with host networking

# Define volumes
volumes:
  data_volume:
    # Named volume for SQLite data persistence
