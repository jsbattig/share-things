# Standard test configuration for ShareThings with host networking
version: '3'
services:
  frontend:
    image: linner.ddns.net:4443/docker.io.proxy/node:18-alpine
    network_mode: "host"  # Use host networking instead of bridge
    volumes:
      - ./client/dist:/app/public:ro
      - ./client/static-server.js:/app/static-server.js:ro
    restart: always
    environment:
      - PORT=15000
      - STATIC_DIR=/app/public
    # Run the Node.js static file server
    command:
      - sh
      - -c
      - |
        # Check if port is already in use
        if nc -z 0.0.0.0 15000 2>/dev/null; then
          echo "ERROR: Port 15000 is already in use by another process"
          netstat -tulpn | grep 15000 || echo "Could not determine which process is using port 15000"
          exit 1
        fi
        
        # Create necessary directories and files
        mkdir -p /app/public/health &&
        echo '{"status":"ok"}' > /app/public/health/index.json &&
        mkdir -p /app &&
        cd /app &&
        
        # Create package.json and install dependencies
        echo '{"type":"module","dependencies":{"express":"^4.18.2","compression":"^1.7.4"}}' > package.json &&
        npm install &&
        
        # Create server.mjs with error handling
        echo 'import express from "express";
        import path from "path";
        import { fileURLToPath } from "url";
        import compression from "compression";
        
        // Handle uncaught exceptions
        process.on("uncaughtException", (err) => {
          console.error("UNCAUGHT EXCEPTION:", err);
          process.exit(1);
        });
        
        const app = express();
        
        // Get directory name in ES modules
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        const STATIC_DIR = process.env.STATIC_DIR || "/app/public";
        const PORT = process.env.PORT || 15000;
        
        app.get("/health", (req, res) => {
          res.status(200).json({ status: "ok" });
        });
        
        app.use(compression());
        app.use(express.static(STATIC_DIR));
        
        app.get("*", (req, res) => {
          res.sendFile(path.join(STATIC_DIR, "index.html"));
        });
        
        // Try to start the server with error handling
        try {
          const server = app.listen(PORT, "0.0.0.0", () => {
            console.log(`Static file server running on port ${PORT}`);
          });
          
          server.on("error", (err) => {
            if (err.code === "EADDRINUSE") {
              console.error(`ERROR: Port ${PORT} is already in use by another process`);
            } else {
              console.error("Server error:", err);
            }
            process.exit(1);
          });
        } catch (err) {
          console.error("Failed to start server:", err);
          process.exit(1);
        }' > /app/server.mjs &&
        
        # Run the server with detailed error output
        node /app/server.mjs || { echo "Server failed to start"; exit 1; }
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:15000/health"]
      interval: 5s
      timeout: 3s
      retries: 3
  
  backend:
    image: linner.ddns.net:4443/docker.io.proxy/node:18-alpine
    network_mode: "host"  # Use host networking instead of bridge
    environment:
      - PORT=15001
    command: ["node", "-e", "const http=require('http');const server=http.createServer((req,res)=>{if(req.url==='/health'){res.writeHead(200,{'Content-Type':'application/json'});res.end(JSON.stringify({status:'ok'}));}else{res.writeHead(404);res.end();}});server.listen(15001);console.log('Server listening on port 15001');"]
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:15001/health"]
      interval: 5s
      timeout: 3s
      retries: 3
