# Temporary development configuration for ShareThings Podman Compose

services:
  backend:
    build:
      context: /home/jsbattig/Dev/share-things/server
      dockerfile: Dockerfile
      args:
        - PORT=15001
    container_name: share-things-backend
    network_mode: "host"  # Use host networking instead of bridge
    environment:
      - NODE_ENV=development
      - PORT=15001
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: /home/jsbattig/Dev/share-things/client
      dockerfile: Dockerfile
      args:
        - API_URL=auto
        - SOCKET_URL=auto
        - API_PORT=15001
        - VITE_API_PORT=15001
    container_name: share-things-frontend
    network_mode: "host"  # Use host networking instead of bridge
    environment:
      - API_PORT=15001
      - PORT=15000
      - STATIC_DIR=/app/public
    # Run the Node.js static file server
    command:
      - sh
      - -c
      - |
        mkdir -p /app/public/health &&
        echo '{"status":"ok"}' > /app/public/health/index.json &&
        mkdir -p /app &&
        cd /app &&
        echo '{"type":"module","dependencies":{"express":"^4.18.2","compression":"^1.7.4"}}' > package.json &&
        npm install &&
        echo 'import express from "express";
        import path from "path";
        import { fileURLToPath } from "url";
        import compression from "compression";
        
        const app = express();
        
        // Get directory name in ES modules
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        
        const STATIC_DIR = process.env.STATIC_DIR || "/app/public";
        const PORT = process.env.PORT || 15000;
        
        app.get("/health", (req, res) => {
          res.status(200).json({ status: "ok" });
        });
        
        app.use(compression());
        app.use(express.static(STATIC_DIR));
        
        app.get("*", (req, res) => {
          res.sendFile(path.join(STATIC_DIR, "index.html"));
        });
        
        app.listen(PORT, "0.0.0.0", () => {
          console.log();
        });' > /app/server.mjs &&
        node /app/server.mjs
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# No networks needed with host networking

# Named volumes for node_modules
volumes:
  volume-backend-node-modules:
  volume-frontend-node-modules:
